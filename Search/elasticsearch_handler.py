"""
Главный обработчик ElasticSearch
"""
import os

from elasticsearch import Elasticsearch, exceptions, helpers
import elasticsearch_dsl
import concurrent.futures
import uuid
from elasticsearch_dsl import connections, Index, Search, analyzer, Q
import re
import jsons
from DataImport import import_sanctions_eu, import_sanctions_uk
from DataImport import import_sanctions_usa, import_sanctions_ua
from DataModel.USA import sanction_USA
from DataModel.UK import sanction_UK
from DataModel.EU import sanction_EU
import copy
from Lexcovery_Sanctions import settings
import aiohttp
import asyncio

from aiohttp import ClientSession

SERVER_URL_DEBUG = "https://localhost:9200"  # Тест
#SERVER_URL = "http://elasticsearch:9200"  # Docker
SERVER_URL = "https://stoprussian.es.us-central1.gcp.cloud.es.io:9243" # Основа

# Password for the 'elastic' user generated by Elasticsearch
ELASTIC_PASSWORD_DEBUG = "tjkwrXgtwvK8kmtxUqE2"
ELASTIC_PASSWORD = "54rV2zeqXtp7AoYDP5MGnEBP"
HTTP_CA_fingerprint = '835009b97f1643505f429aeb80acbdb4f7a01de1c3d360219f4f9b7933384a20'
HTTP_CA_FILENAME = os.path.join(settings.BASE_DIR,  'static') + "/ca_certs/http_ca.crt"
api_key = "sanctions"
api_key_pass = "Z0hHTTBIOEJURDllSmF2OHlwZ3k6cjRlTnBBbGVSTGEzLV9kczU5N1J5Zw=="
# Found in the 'Manage Deployment' page
CLOUD_ID = "StopRussian:dXMtY2VudHJhbDEuZ2NwLmNsb3VkLmVzLmlvJGUyMWY4NDQwZTgyODRhNmZiNTM1NGJkY2UwYzExZmEwJDczZGU0MTdjOTU1NjQxZDI4NTdiMzRhMmQyZmFlNTdi"


sanctions_USA = []
sanctions_EU = []
sanctions_UK = []
sanctions_UA = []

bulk_USA = []
bulk_UK = []
bulk_EU = []
bulk_UA = []

last_update_us = ''
last_update_uk = ''
last_update_eu = ''
last_update_ua = ''

DEBUG = False

def ping(client):
    # Successful response!
    # {'name': 'instance-0000000000', 'cluster_name': ...}
    return client.ping()


def initialize_client():
    # Create the client instance
    if DEBUG:
        client = Elasticsearch(
            SERVER_URL_DEBUG,
            ca_certs=HTTP_CA_FILENAME,
            http_auth=("elastic", ELASTIC_PASSWORD_DEBUG)
        )
    else:
        client = Elasticsearch(
            SERVER_URL,
            cloud_id=CLOUD_ID,
            http_auth=("elastic", ELASTIC_PASSWORD)
        )
    return client


async def create_index():
    global sanctions_USA
    global sanctions_EU
    global sanctions_UK

    client = initialize_client()

    await import_sanctions_lists()

    delete_index()

    global bulk_USA
    global bulk_UK
    global bulk_EU

    # Создаем индекс
    client.indices.create(index="sanctions_usa")
    client.indices.create(index="sanctions_uk")
    client.indices.create(index="sanctions_eu")
    client.indices.create(index="sanctions_ua")

    # Вносим имена в индекс

    LIST_SANCTIONS = ["US", "UK", "EU", "UA"]

    await asyncio.gather(*[sanction_to_json_list(list_name) for list_name in LIST_SANCTIONS])
    """
    for sanction in sanctions_USA:
        dict = jsons.dump(sanction)
        bulk_USA.append(copy.deepcopy(dict))

    for sanction in sanctions_UK:
        dict = jsons.dump(sanction)
        bulk_UK.append(copy.deepcopy(dict))

    for sanction in sanctions_EU:
        dict = jsons.dump(sanction)
        bulk_EU.append(copy.deepcopy(dict))
    """
    helpers.bulk(client, bulk_USA, chunk_size=1000, request_timeout=200, index='sanctions_usa')
    helpers.bulk(client, bulk_UK, chunk_size=1000, request_timeout=200, index='sanctions_uk')
    helpers.bulk(client, bulk_EU, chunk_size=1000, request_timeout=200, index='sanctions_eu')
    helpers.bulk(client, bulk_UA, chunk_size=1000, request_timeout=200, index='sanctions_ua')
    print('Indexes created')


async def sanction_to_json_list(list_name):
    global sanctions_USA
    global sanctions_EU
    global sanctions_UK
    global sanctions_UA

    if list_name == "US":
        await asyncio.gather(*[sanction_to_json(sanction, list_name) for sanction in sanctions_USA])
    elif list_name == "UK":
        await asyncio.gather(*[sanction_to_json(sanction, list_name) for sanction in sanctions_UK])
    elif list_name == "EU":
        await asyncio.gather(*[sanction_to_json(sanction, list_name) for sanction in sanctions_EU])
    elif list_name == "UA":
        await asyncio.gather(*[sanction_to_json(sanction, list_name) for sanction in sanctions_UA])


async def sanction_to_json(sanction, list_name):
    global bulk_USA
    global bulk_UK
    global bulk_EU
    global bulk_UA

    if list_name == "US":
        dict = jsons.dump(sanction)
        bulk_USA.append(copy.deepcopy(dict))
    elif list_name == "UK":
        dict = jsons.dump(sanction)
        bulk_UK.append(copy.deepcopy(dict))
    elif list_name == "EU":
        dict = jsons.dump(sanction)
        bulk_EU.append(copy.deepcopy(dict))
    elif list_name == "UA":
        dict = jsons.dump(sanction)
        bulk_UA.append(copy.deepcopy(dict))


def delete_index():
    client = initialize_client()
    try:
        client.indices.delete(index="sanctions_usa")
        client.indices.delete(index="sanctions_uk")
        client.indices.delete(index="sanctions_eu")
        client.indices.delete(index="sanctions_ua")
    except exceptions.TransportError:
        client.close()


def search_match_request(request):
    client = initialize_client()
    result_usa = []
    result_uk = []
    result_eu = []
    result_ua = []
    query = Q("multi_match", query = request, type='cross_fields', operator='and')

    s = Search(index="sanctions_usa").using(client).query(query).source(["id"])
    s.execute()
    for hit in s.scan():
        result_usa.append(hit.id)
        #print(hit.meta.index)

    s = Search(index="sanctions_uk").using(client).query(query).source(["id"])
    s.execute()
    for hit in s.scan():
        result_uk.append(hit.id)
        #print(hit.meta.index)

    s = Search(index="sanctions_eu").using(client).query(query).source(["id"])
    s.execute()
    for hit in s:
        result_eu.append(hit.id)
        #print(hit.meta.index)

    s = Search(index="sanctions_ua").using(client).query(query).source(["id"])
    s.execute()
    for hit in s:
        result_ua.append(hit.id)
        #print(hit.meta.index)

    return result_usa, result_uk, result_eu, result_ua


async def search_fuzzy_request(request):

    client = initialize_client()
    search_result = []
    result = []

    query = Q("multi_match", query=request, type='best_fields', operator='and', fuzziness='AUTO')

    s = Search().using(client).query(query)
    s.execute()
    for hit in s:
        res = {"index": hit.meta.index, "hit": hit}
        search_result.append(res)

    for doc in search_result:
        hit = doc["hit"]
        if doc["index"] == "sanctions_usa":
            sanction = import_sanctions_usa.import_data_from_json(hit)
            result.append(copy.deepcopy(sanction.webify()))
        elif doc["index"] == "sanctions_uk":
            sanction = import_sanctions_uk.import_data_from_json(hit)
            result.append(copy.deepcopy(sanction.webify()))
        elif doc["index"] == "sanctions_eu":
            sanction = import_sanctions_eu.import_data_from_json(hit)
            result.append(copy.deepcopy(sanction.webify()))
        elif doc["index"] == "sanctions_ua":
            sanction = import_sanctions_ua.import_data_from_json(hit)
            result.append(copy.deepcopy(sanction.webify()))

    return result


def check():
    client = initialize_client()
    return client.ping()


async def import_sanctions_lists():
    global sanctions_USA
    global sanctions_EU
    global sanctions_UK
    global sanctions_UA

    global last_update_us
    global last_update_uk
    global last_update_eu
    global last_update_ua

    LIST_SANCTIONS = ["US", "UK", "EU", "UA"]

    #async with ClientSession() as session:
        #for name in LIST_SANCTIONS:
            #await import_one_list(name, session)

    async with ClientSession() as session:
        await asyncio.gather(*[import_one_list(name, session) for name in LIST_SANCTIONS])


async def import_one_list(list_name, session):
    global sanctions_USA
    global sanctions_EU
    global sanctions_UK
    global sanctions_UA

    global last_update_us
    global last_update_uk
    global last_update_eu
    global last_update_ua

    if list_name == "US":
        try:
            sanctions_USA, last_update_us = await import_sanctions_usa.import_data_from_web(session)
        except Exception:
            sanctions_USA, last_update_us = await import_sanctions_usa.import_data_from_xml()
    elif list_name == "UK":
        try:
            sanctions_UK, last_update_uk = await import_sanctions_uk.import_data_from_web(session)
        except Exception:
            sanctions_UK, last_update_uk = await import_sanctions_uk.import_data_from_xml()
    elif list_name == "EU":
        try:
            sanctions_EU, last_update_eu = await import_sanctions_eu.import_data_from_web(session)
        except Exception:
            sanctions_EU, last_update_eu = await import_sanctions_eu.import_data_from_xml()
    elif list_name == "UA":
        try:
            sanctions_UA, last_update_ua = await import_sanctions_ua.import_data_from_web(session)
        except Exception:
            sanctions_UA, last_update_ua = await import_sanctions_ua.import_data_from_xls()
